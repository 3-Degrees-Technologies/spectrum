#!/bin/bash
# Spectrum .tools Directory Protection Manager
# Protects/unprotects agent .tools folders from accidental deletion

set -e

show_help() {
    cat << EOF
Spectrum .tools Protection Manager

Usage: $0 [COMMAND]

Commands:
    lock      Protect .tools directories (default)
    unlock    Temporarily remove protection for updates
    status    Show protection status
    help      Show this help message

Examples:
    $0 lock         # Protect all .tools directories
    $0 unlock       # Remove protection for updates
    $0 status       # Check current protection status
EOF
}

check_status() {
    echo "üîç Checking .tools protection status..."
    
    for agent_dir in red blue green black; do
        if [[ -d "$agent_dir/.tools" ]]; then
            local perms=$(stat -c "%a" "$agent_dir/.tools" 2>/dev/null || echo "???")
            local status_icon="‚ùì"
            local status_text="Unknown"
            
            case "$perms" in
                "555") status_icon="üîí"; status_text="Protected" ;;
                "755") status_icon="üîì"; status_text="Unlocked" ;;
                *) status_icon="‚ö†Ô∏è"; status_text="Custom ($perms)" ;;
            esac
            
            echo "  $status_icon $agent_dir/.tools: $status_text"
        fi
    done
}

lock_tools_dirs() {
    local protected_count=0
    echo "üîí Protecting .tools directories..."
    
    for agent_dir in red blue green black; do
        if [[ -d "$agent_dir/.tools" ]]; then
            # Make .tools directory read-only (no write permissions)
            chmod 555 "$agent_dir/.tools" 2>/dev/null || true
            
            # Protect key files within .tools
            find "$agent_dir/.tools" -type f -name "*.py" -o -name "*.md" -o -name "spectrum-dev" | while read -r file; do
                chmod 444 "$file" 2>/dev/null || true
            done
            
            # Protect commands directory if it exists
            if [[ -d "$agent_dir/.tools/commands" ]]; then
                chmod 555 "$agent_dir/.tools/commands" 2>/dev/null || true
                find "$agent_dir/.tools/commands" -type f | while read -r file; do
                    chmod 555 "$file" 2>/dev/null || true
                done
            fi
            
            echo "  ‚úÖ Protected $agent_dir/.tools"
            ((protected_count++))
        fi
    done
    
    if [[ $protected_count -gt 0 ]]; then
        echo "üîí Protected $protected_count .tools directories from accidental deletion"
    else
        echo "‚ö†Ô∏è  No .tools directories found to protect"
    fi
}

unlock_tools_dirs() {
    local unlocked_count=0
    echo "üîì Temporarily removing .tools protection for updates..."
    
    for agent_dir in red blue green black; do
        if [[ -d "$agent_dir/.tools" ]]; then
            # Restore write permissions
            chmod 755 "$agent_dir/.tools" 2>/dev/null || true
            
            # Restore write permissions for files
            find "$agent_dir/.tools" -type f | while read -r file; do
                chmod 644 "$file" 2>/dev/null || true
            done
            
            # Restore permissions for commands directory
            if [[ -d "$agent_dir/.tools/commands" ]]; then
                chmod 755 "$agent_dir/.tools/commands" 2>/dev/null || true
                find "$agent_dir/.tools/commands" -type f | while read -r file; do
                    chmod 755 "$file" 2>/dev/null || true
                done
            fi
            
            echo "  ‚úÖ Unlocked $agent_dir/.tools"
            ((unlocked_count++))
        fi
    done
    
    if [[ $unlocked_count -gt 0 ]]; then
        echo "üîì Unlocked $unlocked_count .tools directories for updates"
        echo "‚ö†Ô∏è  Remember to run '$0 lock' after your updates!"
    else
        echo "‚ö†Ô∏è  No .tools directories found to unlock"
    fi
}

# Handle command line arguments
case "${1:-lock}" in
    "lock"|"protect")
        lock_tools_dirs
        ;;
    "unlock"|"unprotect")
        unlock_tools_dirs
        ;;
    "status"|"check")
        check_status
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        echo "Error: Unknown command '$1'"
        echo "Run '$0 help' for usage information"
        exit 1
        ;;
esac