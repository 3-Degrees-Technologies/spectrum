#!/bin/bash
# pr-ready command for Spectrum Development Framework
# Implements: Automated quality gates validation and PR creation

# Colors and emoji
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'
SUCCESS="✅"
ERROR="❌"
INFO="📋"
WORKING="🔄"
QUALITY="🔍"
PR="🔀"

echo -e "${PR} ${BLUE}PR READY${NC}: Automated quality validation and Pull Request creation"

# Check if we're in a ticket workflow
if [[ ! -f ".spectrum/current-ticket.json" ]]; then
    echo -e "${ERROR} No active ticket workflow found"
    echo -e "${INFO} Please run './.spectrum-dev/spectrum-dev start-ticket' first"
    exit 1
fi

# Load current ticket context
ticket_info=$(cat .spectrum/current-ticket.json)
ticket_id=$(echo "$ticket_info" | jq -r '.ticket')
ticket_title=$(echo "$ticket_info" | jq -r '.title')
domain=$(echo "$ticket_info" | jq -r '.domain')
branch=$(echo "$ticket_info" | jq -r '.branch')

echo -e "${INFO} Preparing PR for: ${BLUE}$ticket_id${NC} - $ticket_title"
echo -e "${INFO} Domain: $domain"
echo -e "${INFO} Branch: $branch"

# Check if we have any TDD cycles completed
tdd_cycles=0
if [[ -d ".spectrum/tdd/history" ]]; then
    tdd_cycles=$(ls -1 .spectrum/tdd/history/ 2>/dev/null | wc -l)
fi

echo -e "${INFO} TDD Cycles completed: $tdd_cycles"

# Automated Quality Gates from AI-DEVELOPMENT-GUIDE
echo -e "\n${QUALITY} ${YELLOW}Running Automated Quality Gates:${NC}"
echo ""

# Quality Gate 1: Security (AUTOMATED)
echo -e "${WORKING} Quality Gate 1: Security Validation"
security_warnings=$(dotnet build --no-restore 2>&1 | grep -E "CA3[0-9]{3}|S2068|S4423")

if [[ -n "$security_warnings" ]]; then
    echo -e "${ERROR} ${RED}BLOCKING: Security warnings found${NC}"
    echo ""
    echo -e "${YELLOW}Security issues detected:${NC}"
    echo "$security_warnings"
    echo ""
    echo -e "${INFO} Security warnings must be resolved before PR creation"
    echo -e "${INFO} Fix these issues and rerun pr-ready"
    exit 1
fi
echo -e "${SUCCESS} Security validation passed"

# Quality Gate 2: Build (AUTOMATED)
echo -e "\n${WORKING} Quality Gate 2: Build Validation"
echo -e "${INFO} Running: dotnet build --verbosity normal"

build_output=$(dotnet build --verbosity normal 2>&1)
build_exit_code=$?

if [[ $build_exit_code -ne 0 ]]; then
    echo -e "${ERROR} ${RED}BLOCKING: Build failed${NC}"
    echo ""
    echo -e "${YELLOW}Build errors:${NC}"
    echo "$build_output"
    echo ""
    echo -e "${INFO} Fix build errors and rerun pr-ready"
    exit 1
fi
echo -e "${SUCCESS} Build validation passed"

# Quality Gate 3: Tests (AUTOMATED)
echo -e "\n${WORKING} Quality Gate 3: Test Validation"
echo -e "${INFO} Running: dotnet test --no-build"

test_output=$(dotnet test --no-build --verbosity normal 2>&1)
test_exit_code=$?

if [[ $test_exit_code -ne 0 ]]; then
    echo -e "${ERROR} ${RED}BLOCKING: Tests failed${NC}"
    echo ""
    echo -e "${YELLOW}Test failures:${NC}"
    echo "$test_output" | grep -A 10 -B 5 "Failed"
    echo ""
    echo -e "${INFO} All tests must pass before PR creation"
    echo -e "${INFO} Fix failing tests and rerun pr-ready"
    exit 1
fi

# Extract test summary
test_passed=$(echo "$test_output" | grep -o "Passed: [0-9]*" | grep -o "[0-9]*" || echo "0")
test_total=$(echo "$test_output" | grep -o "Total: [0-9]*" | grep -o "[0-9]*" || echo "0")
echo -e "${SUCCESS} Test validation passed ($test_passed/$test_total tests)"

# Quality Gate 4: Style (AUTOMATED with auto-fix)
echo -e "\n${WORKING} Quality Gate 4: Style Validation"
echo -e "${INFO} Running: dotnet format whitespace --verify-no-changes"

format_output=$(dotnet format whitespace --verify-no-changes 2>&1)
format_exit_code=$?

if [[ $format_exit_code -ne 0 ]]; then
    echo -e "${YELLOW} Style issues found - auto-fixing..."
    dotnet format whitespace
    
    # Check if there are changes to commit
    if [[ -n "$(git status --porcelain)" ]]; then
        echo -e "${INFO} Auto-formatted files - staging changes..."
        git add .
        git commit -m "Auto-format code style

🤖 Generated with [opencode](https://opencode.ai)

Co-Authored-By: opencode <noreply@opencode.ai>"
    fi
    
    echo -e "${SUCCESS} Code automatically formatted and committed"
else
    echo -e "${SUCCESS} Style validation passed"
fi

# Quality Gate Summary
echo -e "\n${SUCCESS} ${GREEN}ALL QUALITY GATES PASSED${NC}"
echo -e "${INFO} Quality Summary:"
echo "  ✅ Security: No critical security warnings"
echo "  ✅ Build: Successful compilation"
echo "  ✅ Tests: All tests passing ($test_passed/$test_total)"
echo "  ✅ Style: Code properly formatted"

# Git Status Check
echo -e "\n${WORKING} Checking git status..."
git_status=$(git status --porcelain)
if [[ -n "$git_status" ]]; then
    echo -e "${YELLOW} Uncommitted changes found:"
    git status --short
    echo ""
    echo -e "${INFO} ${YELLOW}Committing remaining changes before PR creation...${NC}"
    
    # Auto-commit remaining changes with meaningful message
    git add .
    
    # Generate commit message based on changes
    changed_files=$(git diff --cached --name-only | wc -l)
    commit_message="Final changes for $ticket_id

- $changed_files files modified
- Ready for PR creation

🤖 Generated with [opencode](https://opencode.ai)

Co-Authored-By: opencode <noreply@opencode.ai>"
    
    git commit -m "$commit_message"
    echo -e "${SUCCESS} Remaining changes committed automatically"
fi

# Push branch
echo -e "\n${WORKING} Pushing branch to remote..."
git push -u origin "$branch" || {
    echo -e "${ERROR} Failed to push branch"
    echo -e "${INFO} Check network connection and repository permissions"
    exit 1
}
echo -e "${SUCCESS} Branch pushed to origin"

# Get git diff summary for PR description
echo -e "\n${WORKING} Analyzing changes for PR description..."
files_changed=$(git diff dev..HEAD --name-only | wc -l)
insertions=$(git diff dev..HEAD --shortstat | grep -o '[0-9]* insertion' | grep -o '[0-9]*' || echo "0")
deletions=$(git diff dev..HEAD --shortstat | grep -o '[0-9]* deletion' | grep -o '[0-9]*' || echo "0")

# Create PR
echo -e "\n${PR} Creating Pull Request..."

# Generate comprehensive PR description
pr_description="## Summary
Implements $ticket_id: $ticket_title

**Domain**: $domain  
**Development Method**: TDD with $tdd_cycles RED-GREEN-REFACTOR cycles  
**Files Changed**: $files_changed files (+$insertions -$deletions lines)

## Implementation Details
- Developed using Test-Driven Development methodology
- Follows AI-optimized code organization patterns from Centro standards
- All automated quality gates passed before PR creation
- Complete feature implementation with comprehensive test coverage

## Quality Validation ✅
All quality gates automated and verified:

🔒 **Security**: No security warnings (CA3xxx, S2068, S4423)  
🔨 **Build**: Successful compilation with no errors  
🧪 **Tests**: All $test_passed tests passing  
💅 **Style**: Code properly formatted according to Centro standards  

## Test Coverage
Implementation includes comprehensive test coverage developed through $tdd_cycles TDD cycles:
- Each cycle: RED (failing test) → GREEN (minimal implementation) → REFACTOR (quality improvements)
- All tests passing before PR creation
- Test-first approach ensures requirements satisfaction

## Review Checklist
- [ ] Business logic review
- [ ] Architecture compliance  
- [ ] Security considerations
- [ ] Performance implications
- [ ] Documentation completeness

## Deployment Notes
- PR targets \`dev\` branch for staging deployment
- Ready for automated CI/CD pipeline
- No manual deployment steps required

---
🤖 **Automated PR Creation**: Generated using Spectrum Development Framework  
📋 **Process Compliance**: All quality gates and TDD discipline enforced  
🔄 **Next Steps**: Monitor CI/CD pipeline and address any automated feedback

Generated with [opencode](https://opencode.ai)"

# Create PR targeting dev branch (CRITICAL from AGENTS.md)
echo -e "${WORKING} Creating PR targeting dev branch..."

# Try creating PR with explicit head specification to handle remote branch issues
if ! gh pr create --base dev --head "$branch" --title "$ticket_id: $ticket_title" --body "$pr_description"; then
    echo -e "${ERROR} Failed to create PR with --head flag, trying without..."
    
    # Fallback: try without --head flag
    if ! gh pr create --base dev --title "$ticket_id: $ticket_title" --body "$pr_description"; then
        echo -e "${ERROR} Failed to create PR automatically"
        echo -e "${INFO} Troubleshooting:"
        echo "  1. Ensure GitHub CLI is installed and configured: gh auth status"
        echo "  2. Check repository permissions"
        echo "  3. Verify remote origin is set correctly"
        echo ""
        echo -e "${INFO} ${YELLOW}MANUAL PR CREATION REQUIRED:${NC}"
        repo_url="https://github.com/$(git remote get-url origin | sed 's/.*github.com[:/]//' | sed 's/.git$//')"
        echo "  4. Create PR manually at: $repo_url/pull/new/$branch"
        echo "  5. After creating PR manually, update workflow state:"
        echo "     jq '.phase = \"pr-created\" | .pr_url = \"YOUR_PR_URL\"' .spectrum/current-ticket.json > tmp && mv tmp .spectrum/current-ticket.json"
        echo ""
        echo -e "${INFO} Quality gates passed - branch is ready for PR creation"
        exit 1
    fi
fi

# Get PR URL for workflow state update
if ! pr_url=$(gh pr view --json url --jq '.url' 2>/dev/null); then
    echo -e "${ERROR} Could not retrieve PR URL"
    echo -e "${INFO} PR may have been created - check GitHub manually"
    exit 1
fi

# Update ticket state to PR created
jq '.phase = "pr-created" | .pr_created_at = now | .pr_created_at |= todate | .pr_url = $url | .quality_gates_passed = true | .files_changed = $files | .test_count = $tests' \
   --arg url "$pr_url" \
   --arg files "$files_changed" \
   --arg tests "$test_passed" \
   .spectrum/current-ticket.json > .spectrum/current-ticket.json.tmp
mv .spectrum/current-ticket.json.tmp .spectrum/current-ticket.json

echo -e "\n${SUCCESS} ${GREEN}PULL REQUEST CREATED SUCCESSFULLY${NC}"
echo -e "${INFO} Summary:"
echo "  📋 Ticket: $ticket_id - $ticket_title"
echo "  🌳 Branch: $branch"
echo "  🔀 PR URL: $pr_url"
echo "  ✅ Quality Gates: All passed automatically"
echo "  🧪 Tests: $test_passed/$test_total passing"
echo "  🔄 TDD Cycles: $tdd_cycles completed"
echo "  📁 Files: $files_changed changed (+$insertions -$deletions)"
echo ""
echo -e "${INFO} ${GREEN}Automatically starting PR monitoring...${NC}"
echo ""

# Automatically start PR monitoring
./.spectrum-dev/spectrum-dev pr-monitor

echo ""
echo -e "${INFO} ${YELLOW}Phase 3 (after merge):${NC}"
echo "  1. 🧹 Clean up: ./.spectrum-dev/spectrum-dev pr-cleanup (after PR merged)"
echo ""
echo -e "${YELLOW} 🛡️ Branch Protection: PR correctly targets 'dev' branch (staging deployment)${NC}"
echo -e "${INFO} 🎯 Quality Assurance: Pre-commit hooks will continue enforcing standards"