#!/bin/bash
# start-ticket command for Spectrum Development Framework
# Phase 2: Clean Implementation After Context Reset
# Purpose: Read ticket info from discover-ticket, set up workspace, begin focused implementation

# Configuration
TICKET_INFO_FILE="./tmp/spectrum-ticket-info.json"

# Colors and emoji
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'
SUCCESS="‚úÖ"
ERROR="‚ùå"
INFO="üìã"
WORKING="üîÑ"
DOWNLOAD="üì•"
FOLDER="üìÅ"
BRANCH="üå≥"
SAVE="üíæ"
RESET="üîÑ"

echo -e "${INFO} ${BLUE}Spectrum Development Framework - Ticket Implementation${NC}"
echo -e "${INFO} ${YELLOW}Phase 2: Clean Implementation (Post Context Reset)${NC}"
echo ""

# Check for ticket info from discover-ticket phase
if [[ -f "$TICKET_INFO_FILE" ]]; then
    echo -e "${SUCCESS} Found ticket info from discovery phase"
    
    # Extract ticket information
    ticket_id=$(jq -r '.ticket_id' "$TICKET_INFO_FILE")
    ticket_title=$(jq -r '.ticket_title' "$TICKET_INFO_FILE")
    downloaded_file=$(jq -r '.ticket_file' "$TICKET_INFO_FILE")
    
    echo -e "${INFO} Using discovered ticket: ${BLUE}$ticket_id${NC} - $ticket_title"
    echo -e "${INFO} Ticket file: $downloaded_file"
    
    # Validate the discovered file still exists
    if [[ ! -f "$downloaded_file" ]]; then
        echo -e "${ERROR} Discovered ticket file not found: $downloaded_file"
        echo -e "${INFO} Please re-run discovery phase: .spectrum-dev/spectrum-dev discover-ticket"
        exit 1
    fi
    
else
    echo -e "${ERROR} No ticket info found from discovery phase"
    echo -e "${INFO} Please run discover-ticket first to identify a ticket:"
    echo -e "${INFO} 1. Run: ${BLUE}.tools/commands/discover-ticket${NC}"
    echo -e "${INFO} 2. Then run: ${BLUE}.tools/commands/start-ticket${NC}"
    echo ""
    echo -e "${ERROR} Cannot proceed without ticket information"
    exit 1
fi

# Validate ticket ID format
if [[ ! $ticket_id =~ ^[A-Za-z]{2,5}-[0-9]+$ ]]; then
    echo -e "${YELLOW} Warning: Ticket ID format should be ABC-123 (e.g., SIG-16, CEN-408, PROJ-1234)"
    echo -e "${INFO} Proceeding with provided ID: $ticket_id"
fi

# Validate file has content
if [[ ! -s "$downloaded_file" ]]; then
    echo -e "${ERROR} Ticket file is empty: $downloaded_file"
    exit 1
fi

echo -e "${SUCCESS} Ready to proceed with ticket: ${BLUE}$ticket_id${NC} - $ticket_title"
echo -e "${SUCCESS} Using ticket file: $downloaded_file ($(wc -l < "$downloaded_file") lines)"

# Domain detection and workspace setup
echo -e "\n${FOLDER} Step 1: Setting up ticket workspace..."

echo -e "${INFO} ${YELLOW}AI Agent: Choose appropriate folder for this ticket based on content.${NC}"
echo "For now, tickets will be placed in project root. Future enhancement will add intelligent domain detection."

# For now, place tickets in root-level tickets folder
domain="tickets"
base_path="."
domain_folder="$base_path/$domain"

# Create domain folder if it doesn't exist
if [[ ! -d "$domain_folder" ]]; then
    echo -e "${WORKING} Creating new domain folder: $domain_folder"
    mkdir -p "$domain_folder"
fi

# Step 2: Copy ticket to domain folder
echo -e "\n${FOLDER} Step 2: Creating ticket documentation..."

# Create clean filename
clean_title=$(echo "$ticket_title" | tr ' ' '-' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9-]//g')
ticket_doc_path="$domain_folder/$ticket_id-$clean_title.md"

# Copy complete ticket file to domain folder
cp "$downloaded_file" "$ticket_doc_path"
echo -e "${SUCCESS} Created complete ticket documentation: $ticket_doc_path"

# Step 3: Create feature branch
echo -e "\n${BRANCH} Step 3: Creating feature branch..."

# Ensure we're on main/master branch or detect default branch
current_branch=$(git branch --show-current)
default_branch=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5 2>/dev/null || echo "main")

if [[ "$current_branch" != "$default_branch" ]]; then
    echo -e "${WORKING} Switching to $default_branch branch..."
    git checkout "$default_branch" || {
        echo -e "${ERROR} Failed to checkout $default_branch branch"
        echo -e "${INFO} Trying alternative default branches..."
        
        # Try common default branch names
        for branch in main master dev develop; do
            if git show-ref --verify --quiet "refs/heads/$branch"; then
                echo -e "${WORKING} Switching to $branch branch..."
                git checkout "$branch" && default_branch="$branch" && break
            fi
        done
        
        if [[ "$(git branch --show-current)" == "$current_branch" ]]; then
            echo -e "${ERROR} Could not find suitable base branch"
            exit 1
        fi
    }
fi

# Pull latest from default branch
echo -e "${WORKING} Pulling latest $default_branch branch..."
git pull origin "$default_branch" || {
    echo -e "${ERROR} Failed to pull latest $default_branch"
    exit 1
}

# Create feature branch
branch_name="feature/$ticket_id-$clean_title"
echo -e "${WORKING} Creating feature branch: $branch_name"
git checkout -b "$branch_name" || {
    echo -e "${ERROR} Failed to create feature branch"
    exit 1
}

echo -e "${SUCCESS} Created and switched to feature branch: $branch_name"

# Step 4: Save workflow state
echo -e "\n${SAVE} Step 4: Saving workflow state..."

mkdir -p .spectrum
cat > .spectrum/current-ticket.json << EOF
{
  "ticket": "$ticket_id",
  "title": "$ticket_title",
  "domain": "$domain",
  "base_path": "$base_path",
  "domain_folder": "$domain_folder",
  "ticket_doc_path": "$ticket_doc_path",
  "branch": "$branch_name",
  "phase": "started",
  "created": "$(date -Iseconds)",
  "source_file": "$downloaded_file"
}
EOF

echo -e "${SUCCESS} Workflow state saved to .spectrum/current-ticket.json"

# Summary and next steps
echo -e "\n${SUCCESS} Ticket workflow initialized successfully!"
echo -e "${INFO} Summary:"
echo "  Ticket: $ticket_id - $ticket_title"
echo "  Domain: $domain ($base_path)"
echo "  Documentation: $ticket_doc_path"
echo "  Branch: $branch_name"
echo "  Complete ticket details: $(wc -l < "$ticket_doc_path") lines"
echo ""
echo -e "${INFO} Next steps:"
echo "  1. Review complete ticket requirements in $ticket_doc_path"
echo "  2. Begin implementation work based on ticket requirements"
echo "  3. Use TDD approach if applicable: write tests first, then implementation"
echo "  4. Commit work regularly and push feature branch when ready"

# Clean up temp file if it was in temp location
if [[ "$downloaded_file" =~ ^(/tmp|./tmp) ]]; then
    echo -e "${INFO} Cleaning up temporary file: $downloaded_file"
    rm -f "$downloaded_file"
fi
