#!/bin/bash
# discover-ticket command for Spectrum Development Framework
# Phase 1: Ticket Discovery and Data Extraction
# Purpose: Extract ticket details from Slack, prepare temp file, set up for context reset

# Configuration
# Use project-local tmp directory
PROJECT_CODE="CEN"  # Centro project code
SPECTRUM_TMP_DIR=".tmp"
TICKET_INFO_FILE="$SPECTRUM_TMP_DIR/spectrum-ticket-info.json"

# Ensure project-local tmp directory exists
mkdir -p "$SPECTRUM_TMP_DIR"

# Colors and emoji
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'
SUCCESS="✅"
ERROR="❌"
INFO="📋"
WORKING="🔄"
SEARCH="🔍"
DOWNLOAD="📥"
SAVE="💾"
RESET="🔄"

echo -e "${INFO} ${BLUE}Spectrum Development Framework - Ticket Discovery${NC}"
echo -e "${INFO} ${YELLOW}Phase 1: Discovery & Data Extraction${NC}"
echo ""

# Check if we already have ticket info
if [[ -f "$TICKET_INFO_FILE" ]]; then
    echo -e "${INFO} Found existing ticket info from previous discovery:"
    cat "$TICKET_INFO_FILE" | jq -r '"  Ticket: " + .ticket_id + " - " + .ticket_title'
    echo ""
    echo -e "${SUCCESS} Using existing ticket info"
    echo -e "${INFO} Ready for context reset and implementation phase"
    echo -e "${RESET} Next: Run ${YELLOW}.tools/commands/start-ticket${NC}"
    exit 0
fi

# Automated discovery for AI agents
echo -e "${SEARCH} Step 1: Automated Ticket Discovery"
echo -e "${INFO} ${YELLOW}=== AUTOMATED AI AGENT DISCOVERY ===${NC}"
echo ""

# Get recent Slack messages (exclude ones I've already reacted to)
echo -e "${WORKING} Checking Slack for ticket assignments..."
python3 .tools/slack_rest_client.py get_relevant_messages 50 > "$SPECTRUM_TMP_DIR/slack_messages.json"

if [[ ! -s "$SPECTRUM_TMP_DIR/slack_messages.json" ]]; then
    echo -e "${ERROR} Failed to fetch Slack messages"
    exit 1
fi

# Parse messages for MY ticket assignments - prioritize newest first  
echo -e "${WORKING} Searching for my ticket assignments..."

# Get my agent name and user ID for filtering
my_agent_name=$(python3 .tools/slack_rest_client.py detect_agent | jq -r '.agent_name // "{AGENT_BLUE}"' 2>/dev/null || echo "{AGENT_BLUE}")
my_user_id=$(python3 .tools/slack_rest_client.py get_relevant_messages 1 | jq -r '.bot_user_id // empty' 2>/dev/null)

# If we didn't get a user ID from the API, try to detect it from recent messages
if [[ -z "$my_user_id" ]]; then
    my_user_id=$(jq -r '.result.messages[] | select(.user_name == "{AGENT_BLUE}") | .user_id' "$SPECTRUM_TMP_DIR/slack_messages.json" 2>/dev/null | head -n 1)
fi

echo -e "${INFO} Agent: $my_agent_name (ID: $my_user_id)"

# Look for assignments TO ME that I haven't already completed (check both user ID and agent name)
# Exclude congratulatory messages and look specifically for assignment language
ticket_assignment=$(jq -r --arg agent "$my_agent_name" --arg userid "$my_user_id" '.result.messages[] | select(.user_name == "{AGENT_GREEN}") | select(.text | (contains($agent) or contains($userid)) and test("[A-Z]+-[0-9]+")) | select(.text | test("New Assignment|assigned.*[A-Z]+-[0-9]+|Assignment.*[A-Z]+-[0-9]+|ready for.*implementation|ready for.*work|In Progress.*ready"; "i")) | select(.text | test("Excellent|Great|congratulations|completed|done|finished"; "i") | not) | .text' "$SPECTRUM_TMP_DIR/slack_messages.json" 2>/dev/null | head -n 1)

if [[ -z "$ticket_assignment" || "$ticket_assignment" == "null" ]]; then
    echo -e "${INFO} No new ticket assignment found for me"
    echo -e "${INFO} Checking if I have any incomplete assignments..."
    
    # Check for any tickets I was assigned but may not have completed
    incomplete_assignment=$(jq -r --arg agent "$my_agent_name" --arg userid "$my_user_id" '.result.messages[] | select(.user_name == "{AGENT_GREEN}") | select(.text | (contains($agent) or contains($userid)) and test("[A-Z]+-[0-9]+")) | select(.text | test("New Assignment|assigned.*[A-Z]+-[0-9]+|Assignment.*[A-Z]+-[0-9]+"; "i")) | select(.text | test("Excellent|Great|congratulations|completed|done|finished"; "i") | not) | .text' "$SPECTRUM_TMP_DIR/slack_messages.json" 2>/dev/null | head -n 1)
    
    # Also check my own acknowledgment messages that might contain ticket info
    if [[ -z "$incomplete_assignment" || "$incomplete_assignment" == "null" ]]; then
        echo -e "${INFO} Checking my own acknowledgment messages..."
        my_acknowledgment=$(jq -r --arg userid "$my_user_id" '.result.messages[] | select(.user_id == $userid) | select(.text | test("Received.*[A-Z]+-[0-9]+.*assignment|[A-Z]+-[0-9]+.*assignment")) | .text' "$SPECTRUM_TMP_DIR/slack_messages.json" 2>/dev/null | head -n 1)
        
        if [[ -n "$my_acknowledgment" && "$my_acknowledgment" != "null" ]]; then
            echo -e "${INFO} Found acknowledgment message: $my_acknowledgment"
            incomplete_assignment="$my_acknowledgment"
        fi
    fi
    
    if [[ -z "$incomplete_assignment" || "$incomplete_assignment" == "null" ]]; then
        echo -e "${INFO} No assignments found. Requesting new ticket from {AGENT_GREEN}..."
        python3 .tools/slack_rest_client.py send_message "@{AGENT_GREEN} Ready for next ticket assignment. What should I work on next?"
        echo -e "${SUCCESS} Requested new ticket assignment from {AGENT_GREEN}"
        echo -e "${INFO} Please wait for assignment and re-run discover-ticket"
        exit 0
    else
        ticket_assignment="$incomplete_assignment"
        echo -e "${INFO} Found existing assignment to review: $incomplete_assignment"
    fi
fi

echo -e "${SUCCESS} Found ticket assignment:"
echo -e "${INFO}   $ticket_assignment"
echo ""

# Extract ticket ID and title
ticket_id=$(echo "$ticket_assignment" | grep -oE '[A-Z]+-[0-9]+' | head -n 1)
detected_project_code=$(echo "$ticket_id" | cut -d'-' -f1)

# Update tmp directory based on detected project code (keeping local)
if [[ -n "$detected_project_code" && "$detected_project_code" != "$PROJECT_CODE" ]]; then
    echo -e "${INFO} Detected project code: ${BLUE}$detected_project_code${NC}"
    # Keep using local .tmp directory regardless of detected project code
    PROJECT_CODE="$detected_project_code"
    # SPECTRUM_TMP_DIR and TICKET_INFO_FILE remain unchanged (using .tmp)
fi

# Extract ticket title - look for "assigned: Title" pattern first
ticket_title=$(echo "$ticket_assignment" | sed -n 's/.*assigned: *\(.*\)/\1/p' | head -n 1)

if [[ -z "$ticket_title" ]]; then
    # Try alternative pattern with ticket ID and colon
    ticket_title=$(echo "$ticket_assignment" | sed -n 's/.*\([A-Z]\+-[0-9]\+\)[^:]*: *\(.*\)/\2/p' | head -n 1)
fi

if [[ -z "$ticket_title" ]]; then
    # Try alternative extraction patterns - looking for "assigned: *Title*"
    ticket_title=$(echo "$ticket_assignment" | sed -n 's/.*assigned: *\*\(.*\)\*.*/\1/p' | head -n 1)
fi

if [[ -z "$ticket_title" ]]; then
    # Try pattern for "assigned: **Title**"
    ticket_title=$(echo "$ticket_assignment" | sed -n 's/.*assigned: *\*\*\(.*\)\*\*.*/\1/p' | head -n 1)
fi

if [[ -z "$ticket_title" ]]; then
    # Try extracting from file attachment name if available
    if [[ -n "$attachment_found" ]]; then
        ticket_title=$(jq -r '.result.messages[] | select(.files and (.files | length > 0)) | .files[0].name // empty' "$SPECTRUM_TMP_DIR/slack_messages.json" 2>/dev/null | head -n 1 | sed 's/^[A-Z]\+-[0-9]\+_//; s/\.md$//; s/_/ /g')
    fi
fi

if [[ -z "$ticket_title" ]]; then
    # Default fallback
    ticket_title="Ticket Assignment Found"
fi

echo -e "${WORKING} Extracted information:"
echo -e "${INFO}   Ticket ID: ${BLUE}$ticket_id${NC}"
echo -e "${INFO}   Title: $ticket_title"
echo ""

# Check for file attachments in the messages
echo -e "${WORKING} Checking for ticket detail files..."
attachment_found=$(jq -r '.result.messages[] | select(.files and (.files | length > 0)) | .files[0].id // empty' "$SPECTRUM_TMP_DIR/slack_messages.json" 2>/dev/null | head -n 1)

ticket_file_path="$SPECTRUM_TMP_DIR/discovered-ticket-details.md"

if [[ -n "$attachment_found" && "$attachment_found" != "null" ]]; then
    echo -e "${DOWNLOAD} Downloading ticket details file..."
    python3 .tools/slack_rest_client.py download_file "$attachment_found" "$ticket_file_path"
    
    if [[ -f "$ticket_file_path" && -s "$ticket_file_path" ]]; then
        echo -e "${SUCCESS} Downloaded ticket details to: $ticket_file_path"
    else
        echo -e "${ERROR} Failed to download file attachment"
        ticket_file_path=""
    fi
else
    echo -e "${INFO} No file attachments found, using message content as ticket details"
    
    # Extract detailed message content and save it
    echo "# Ticket Assignment Details" > "$ticket_file_path"
    echo "" >> "$ticket_file_path"
    echo "**Ticket ID:** $ticket_id" >> "$ticket_file_path"
    echo "**Title:** $ticket_title" >> "$ticket_file_path"
    echo "" >> "$ticket_file_path"
    echo "## Assignment Message" >> "$ticket_file_path"
    echo "$ticket_assignment" >> "$ticket_file_path"
    echo "" >> "$ticket_file_path"
    
    # Add any detailed messages from {AGENT_GREEN} that mention the current ticket ID
    jq -r --arg ticket_id "$ticket_id" '.result.messages[] | select(.user_name == "{AGENT_GREEN}") | select(.text | contains($ticket_id)) | .text' "$SPECTRUM_TMP_DIR/slack_messages.json" 2>/dev/null >> "$ticket_file_path"
fi

# Determine ticket type
ticket_type="backend"
if echo "$ticket_assignment" | grep -qi "research\|investigate\|analyze"; then
    ticket_type="research"
elif echo "$ticket_assignment" | grep -qi "architecture\|design\|specification"; then
    ticket_type="architecture"
fi

echo -e "${WORKING} Creating ticket info file..."

# Extract actual title from ticket file if available
if [[ -f "$ticket_file_path" && -s "$ticket_file_path" ]]; then
    # Try to extract title from the first line if it's a markdown header
    file_title=$(head -n 1 "$ticket_file_path" | sed 's/^# *//' | sed 's/^## *//')
    
    # If we found a meaningful title from the file, use it
    if [[ -n "$file_title" && "$file_title" != "Ticket Assignment Details" && ${#file_title} -gt 5 ]]; then
        echo -e "${INFO} Using title from ticket file: $file_title"
        ticket_title="$file_title"
    fi
fi

# Create the ticket info JSON file
cat > "$TICKET_INFO_FILE" << EOF
{
  "ticket_id": "$ticket_id",
  "ticket_title": "$ticket_title",
  "ticket_file": "$ticket_file_path",
  "ticket_type": "$ticket_type",
  "discovered_at": "$(date -Iseconds)",
  "discovered_by": "{AGENT_BLUE}"
}
EOF

echo -e "${SUCCESS} Created ticket info file: $TICKET_INFO_FILE"
echo ""

# Acknowledge the assignment by reacting to the message
echo -e "${WORKING} Acknowledging ticket assignment..."
assignment_timestamp=$(jq -r --arg agent "$my_agent_name" --arg userid "$my_user_id" '.result.messages[] | select(.user_name == "{AGENT_GREEN}") | select(.text | (contains($agent) or contains($userid)) and test("[A-Z]+-[0-9]+")) | select(.text | test("assigned|Assignment|assignment|New Assignment|ready for.*implementation|ready for.*work|In Progress.*ready"; "i")) | .timestamp' "$SPECTRUM_TMP_DIR/slack_messages.json" 2>/dev/null | head -n 1)

if [[ -n "$assignment_timestamp" && "$assignment_timestamp" != "null" ]]; then
    python3 .tools/slack_rest_client.py add_reaction "$assignment_timestamp" "eyes" > /dev/null 2>&1
    echo -e "${SUCCESS} Acknowledged assignment with reaction"
else
    echo -e "${INFO} Could not find message timestamp for acknowledgment"
fi

# Clean up temp files
rm -f "$SPECTRUM_TMP_DIR/slack_messages.json"

# Validate that discovery was completed
if [[ ! -f "$TICKET_INFO_FILE" ]]; then
    echo -e "${ERROR} Ticket info file not found: $TICKET_INFO_FILE"
    echo -e "${INFO} Please complete the discovery process and create the ticket info file"
    echo -e "${INFO} Re-run this command when discovery is complete"
    exit 1
fi

# Validate ticket info file format
if ! jq -e . "$TICKET_INFO_FILE" >/dev/null 2>&1; then
    echo -e "${ERROR} Invalid JSON format in ticket info file"
    echo -e "${INFO} Please check the JSON syntax and try again"
    exit 1
fi

# Extract and validate required fields
ticket_id=$(jq -r '.ticket_id // empty' "$TICKET_INFO_FILE")
ticket_title=$(jq -r '.ticket_title // empty' "$TICKET_INFO_FILE")
ticket_file=$(jq -r '.ticket_file // empty' "$TICKET_INFO_FILE")

if [[ -z "$ticket_id" || -z "$ticket_title" || -z "$ticket_file" ]]; then
    echo -e "${ERROR} Missing required fields in ticket info file"
    echo -e "${INFO} Required: ticket_id, ticket_title, ticket_file"
    echo -e "${INFO} Current content:"
    cat "$TICKET_INFO_FILE"
    exit 1
fi

# Validate ticket file exists
if [[ ! -f "$ticket_file" ]]; then
    echo -e "${ERROR} Ticket file not found: $ticket_file"
    echo -e "${INFO} Please ensure the downloaded ticket file exists"
    exit 1
fi

# Validate ticket file has content
if [[ ! -s "$ticket_file" ]]; then
    echo -e "${ERROR} Ticket file is empty: $ticket_file"
    exit 1
fi

# Success summary
echo -e "${SUCCESS} Ticket discovery completed successfully!"
echo -e "${INFO} Discovery Summary:"
echo -e "  Ticket: ${BLUE}$ticket_id${NC} - $ticket_title"
echo -e "  File: $ticket_file ($(wc -l < "$ticket_file") lines)"
echo -e "  Info: $TICKET_INFO_FILE"
echo ""

# Ready for implementation instructions
echo -e "${RESET} ${YELLOW}=== READY FOR IMPLEMENTATION ===${NC}"
echo -e "${INFO} Discovery phase complete - ticket data prepared"
echo -e "${INFO} Now ready for clean implementation phase"
echo ""
echo -e "${YELLOW}Next Steps:${NC}"
echo -e "${RESET} 1. Run: ${BLUE}.tools/commands/start-ticket${NC} (clean implementation)"
echo -e "${RESET} 2. Optional: Clear conversation context manually if desired"
echo ""
echo -e "${SUCCESS} Ready for focused implementation!"
